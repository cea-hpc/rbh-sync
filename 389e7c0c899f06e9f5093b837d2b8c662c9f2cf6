{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d674d4e5_c57e48bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-09-23T22:30:22Z",
      "side": 1,
      "message": "Just want to log a few thoughts about the handling of xattrs here...\n\nFirst: it is surprisingly complicated.\n\nMongodb has some \"interesting\" support for projections.\n\nExample of things which are possible:\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.find().limit(1)\n {\n     _id: \u003cid\u003e,\n     a: 0,\n     b: 1,\n     c: {\n         d: 2,\n         e: 3,\n         f: 4\n     }\n }\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {a: true}}])\n {\n     _id: \u003cid\u003e,\n     a: 0\n }\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {a: false}}])\n {\n     _id: \u003cid\u003e,\n     b: 1,\n     c: {\n         d: 2,\n         e: 3,\n         f: 4\n     }\n }\n\nSo basically, {x: true} means: only \u0027x\u0027; and {x: false} means: everything but \u0027x\u0027.\n\nNow, here comes the interesting part, none of the following are valid projections:\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {a: true, b: false}}])\n Can\u0027t mix inclusion/exclusion projections\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {c: true, \"c.d\": true}}])\n Path collision between \"c\" and \"c.d\"\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {c: false, \"c.d\": true}}])\n Path collision between \"c\" and \"c.d\"\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {c: true, \"c.d\": false}}])\n Path collision between \"c\" and \"c.d\"\n\nInterestingly, the last one (#4) can be emulated with:\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {c: true}}, {$project: {\"c.d\": false}}])\n {\n     _id: \u003cid\u003e,\n     c: {\n         e: 3,\n         f: 4\n     }\n }\n\nIt sort of makes sense not to support mixing inclusion/exclusion projections at a given level (#1), or an inclusion on a field that has already been excluded (#3). But to some extent, one might want to filter a set of fields in a subdocument (#2) and expect something like:\n\n {\n     _id: \u003cid\u003e,\n     c: {\n         d: 2\n     }\n }\n\nYou might be tempted to say: ah, but that\u0027s easy, just directly ask for a projection on \"c.d\"!\nAnd you would be right for this simple case:\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {\"c.d\": true}}])\n {\n     _id: \u003cid\u003e,\n     c: {\n         d: 2\n     }\n }\n\nBut what if you had one more level of subdocuments:\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.find().limit(1)\n {\n     _id: \u003cid\u003e,\n     a: 0,\n     b: 1,\n     c: {\n         d: {\n             e: 3,\n             f: 4,\n             g: 5\n         },\n         h: 6,\n         i: 7\n     }\n }\n\nHow would you formulate a query that returns \"c\" and everything it contains, except for \"d\", for which you only want the \"e\" subfield? ie:\n\n {\n     _id: \u003cid\u003e,\n     c: {\n         d: {\n             e: 3\n         },\n         h: 6,\n         i: 7\n     }\n }\n\nWithout explicitly requesting \"c.h\" or \"c.i\", it is really hard. Not entirely impossible, but really not easy... A first attempt would be to use $set to rewrite \"c.d\" to only include \"e\":\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([{$project: {c: true}}, {$set: {\"c.d\": {e: \"$c.d.e\"}}}])\n {\n     _id: \u003cid\u003e,\n     a: 0,\n     b: 1,\n     c: {\n         d: {\n             e: 3,\n             f: 4,\n             g: 5\n         },\n         h: 6,\n         i: 7\n     }\n }\n\nBut $set does not \"overwrite\" fields (unlike what the docs advertise). ðŸ˜•\n\nSo you probably have to resort to the following (convoluted) approach:\n\n \u003e\u003e\u003e db.\u003ccollection\u003e.aggregate([\n ...     {$project: {c: true}},\n ...     {$set: {tmp: {e: \"$c.d.e\"}}},\n ...     {$project: {\"c.d\": 0}}},\n ...     {$set: {\"c.d\": \"$tmp\"}},\n ...     {$project: {tmp: 0}}\n ... ])\n {\n     _id: \u003cid\u003e,\n     c: {\n         d: {\n             e: 3\n         },\n         h: 6,\n         i: 7\n     }\n }\n\n(you might be tempted to use the $unset operator to remove \"c.d\" and \"tmp\"... It won\u0027t work for \"tmp\" ðŸ˜•++)\n\n-----------------------------------------\n\nAll that to say what?\n\nWell, projection is harder that it seems. I haven\u0027t even touched on the subject of what this would look like with other backends... SQL doesn\u0027t natively support \"EXCEPT\" operators, fortunately PostgreSQL does. Then again, how would it look like for xattrs considering they will likely be stored as jsonb? No idea.\n\nAnd then to conclude: I think we shouldn\u0027t bother too much with this. In the future, let\u0027s say one can either request some xattrs to include, or exclude, but not both; and then only top-level projections are supported (ie. \"a\" is OK, \"a.b\" is KO).\nLet\u0027s also not make it mandatory for backends to _reject_ non-compliant requests, but let them handle those as they wish (ie. as best they can). Undefined behaviour, anyone?",
      "revId": "389e7c0c899f06e9f5093b837d2b8c662c9f2cf6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05f6fcce_5e336ffb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2021-10-14T13:09:05Z",
      "side": 1,
      "message": "Really thanks for this work!\n\nI agree with you on the include XOR exclude policy. And I do not see only supporting top-level projections as an issue either. I mean that for one of our use cases, we will receive some xattrs from above which I suppose will be organized in a subgroup: it is completely understandable to include/exclude the whole subgroup.\n\nFor the undefined behaviour, it is fine with me, as long as the doc mentions it.",
      "parentUuid": "d674d4e5_c57e48bf",
      "revId": "389e7c0c899f06e9f5093b837d2b8c662c9f2cf6",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}