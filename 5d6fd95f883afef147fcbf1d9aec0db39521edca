{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "60b63381_a02e0347",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(minor) printf \"$@\" \u003e\u00262",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87043a41_d4d4d207",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60b63381_a02e0347",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f3f42e8_e7d1607f",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(major) The API is really throwing me off here.\n\nWe don\u0027t indicate which databases are compared, it\u0027s hard-coded. And we don\u0027t even \"compare\" two databases, we check that all the elements of one are included in the other.\n\nHere is an example of an API which I find nicer:\n\n printf -v expected \u0027new Mongo().getDB(\"%s\").entries.find(\n     {\n         \"ns.xattr.path\": {\n             $regex: \"^/dir\"\n         }\n     },\n ).sort(_id: 1)\u0027 \"$testdb1\"\n printf -v actual \u0027new Mongo().getDB(\"%s\").entries.find().sort(_id: 1)\u0027 \"$testdb2\"\n\n cursordiff \"$actual\" \"$expected\"\n \nThen cursordiff can be something like:\n\n cursordiff()\n {\n     local script\n     \n     printf -v script \u0027\n         function every(iterable, func) {\n             for (item of iterable) {\n                 if (!func(item))\n                     return false;\n             }\n             return true;\n         }\n         \n         function* keys(obj) {\n             for (key in obj)\n                 yield key;\n         }\n         \n         function isEqual(obj1, obj2) {\n             if (typeof(obj1) !\u003d\u003d typeof(obj2)) {\n                 return false;\n             }\n             if (typeof(obj1) \u003d\u003d\u003d \"object\") {\n                 return every(keys(obj1), key \u003d\u003e isEqual(obj1[key], obj2[key]));\n             }\n             return obj1 \u003d\u003d\u003d obj2;\n         }\n         \n         function* zip(cur1, cur2) {\n             while (cur1.hasNext() \u0026\u0026 cur2.hasNext())\n                 yield [cur1.next(), cur2.next()];\n         }\n         \n         const cur1 \u003d %s;\n         const cur2 \u003d %s;\n\n         every(zip(cur1, cur2), ([obj1, obj2]) \u003d\u003e isEqual(obj1, obj2));\n     \u0027 \"$1\" \"$2\"\n     \n     \"$(mongosh --eval --nodb \"$script\")\"\n }\n \nThis snippet raises the following exception with mongosh:\n\n ReferenceError: _de10 is not defined\n\nBut runs fine with mongo. Looks like a bug in the shell\u0027s implementation.\n\nThe functions `every()` and `keys()` could be replaced by their builtin JS implementation but only `mongosh` provides them.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "395676a0_59d64c95",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "The code you gave doesn\u0027t work for me, mongo outputs the following:\n`\n./test_mongo_mongo_sync.bash: line 94: $\u00272021-12-15T15:19:26.473+0000 F  -        [main] exception: \\\u0027[\\\u0027 present, but not first character in  key \u003d\u003e isEqual(obj1[key]:27017\\n2021-12-15T15:19:26.473+0000 E  -        [main] exiting with code 1\u0027: command not found\n\n`\n\nI am unfortunately not versed enough in Mongo or Javascript to understand what this means, and I didn\u0027t find any help online.",
      "parentUuid": "3f3f42e8_e7d1607f",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "138458ad_9c17a6ea",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T18:49:53Z",
      "side": 1,
      "message": "It\u0027s because I added --nodb between --eval and \"$script\", put it at the beginning and you should be good.",
      "parentUuid": "395676a0_59d64c95",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd6fb423_a221a1e1",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-16T09:36:08Z",
      "side": 1,
      "message": "Putting the \u0027--nodb\u0027 before changes the error to:\n-\n./test_mongo_mongo_sync.bash: line 94: $\u00272021-12-16T09:29:33.950+0000 E  QUERY    [js] uncaught exception: SyntaxError: missing ) after argument list :\\n@(shell eval):30:105\\n2021-12-16T09:29:33.950+0000 E  -        [main] exiting with code -4\u0027: command not found\n-",
      "parentUuid": "138458ad_9c17a6ea",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c72991b0_f2d5e7bf",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-20T00:29:13Z",
      "side": 1,
      "message": "I am going to have to ask you to investigate this on your own.\n\nI\u0027m willing to help, but I\u0027m not a debugger either. ðŸ˜„\nIf you can send me something which I can copy-paste to reproduce, that would be a great start.",
      "parentUuid": "dd6fb423_a221a1e1",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "488ee8bd_d1908f67",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-01-05T09:21:08Z",
      "side": 1,
      "message": "Found the problem, solved it, hope it\u0027s good for you now :)",
      "parentUuid": "c72991b0_f2d5e7bf",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3f16b35_181ab6d7",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2022-01-05T23:15:08Z",
      "side": 1,
      "message": "It\u0027s not super nice if I have to figure out what you changed. ðŸ˜ž\n\nIf I got that right, you did:\n\n -     \"$(mongosh --eval --nodb \"$script\")\"\n +     mongosh --nodb --eval \"$script\" ||\n +         error \"sync resulted in different db state\"\n\nThe reason why I executed mongosh inside a subshell is because the script evaluates to the strings \"true\" or \"false\", which happen to also be bash builtins that do what you can expect. Something along the lines of:\n\n true() { return 0; }\n false() { return 1; }\n \nAFAICT, \u0027mongosh --nodb --eval \"$script\"\u0027 returns successfully unless there is a syntax error in the script, meaning your test will never fail.",
      "parentUuid": "488ee8bd_d1908f67",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50756b7b_7c4dd1f2",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-01-06T12:01:54Z",
      "side": 1,
      "message": "Yes my bad, I thought I uploaded an earlier version with your base code, but I didn\u0027t...\nCompared to your script, I changed 3 things: the --nodb place in the command line, added brackets in the \"sort\" specification of the \"entries.find().sort()\", and removed the use of a subshell.\n\nThe problem we have with your version on the mongosh line is that the \"set -e\" is not triggered by the failure of that same line :\n\n```\n# consider I call the script with an invalid regex (\u0027$regex: \"^/dr\"\u0027), which triggers the condition right under:\n\n\u0027\nprintf -v script \u0027\n\n ...\n \nif (cur1.size() !\u003d cur2.size())\n    quit(1);\n\nevery(zip(cur1, cur2), ([obj1, obj2]) \u003d\u003e isEqual(obj1, obj2));\n\u0027 \"$1\" \"$2\"\n\n    \"$(mongosh --nodb --eval \"$script\")\"\n\u0027\n\n# I get the following output:\n\n./test_mongo_mongo_sync.bash: line 99: : command not found       \ntest_sync_branch: âœ–\n\n# line 99 is the line of the call of mongosh\n\n# If I use the correct regex (\u0027$regex: \"^/dir\"\u0027), there is no error, and none is triggered\n\ntest_sync_branch: âœ”\n\n# Now if I trigger a syntax error in the script, for instance by changing the lines to the following (notice that \"quit(1)\" became \"qut(1)\"):\n\n\u0027\nprintf -v script \u0027\n\n ...\n \nif (cur1.size() !\u003d cur2.size())\n    qut(1);\n\nevery(zip(cur1, cur2), ([obj1, obj2]) \u003d\u003e isEqual(obj1, obj2));\n\u0027 \"$1\" \"$2\"\n\n    \"$(mongosh --nodb --eval \"$script\")\"\n\u0027\n\n# If I use the wrong regexp (\u0027$regex: \"^/dr\"\u0027), I get this error:\n\n./test_mongo_mongo_sync.bash: line 99: $\u00272022-01-06T11:46:01.395+0000 E  QUERY    [js] uncaught exception: ReferenceError: qit is not defined :\\n@(shell eval):37:13\\n2022-01-06T11:46:01.395+0000 E  -        [main] exiting with code -4\u0027: command not found\ntest_sync_branch: âœ–\n\n\n# If I use the correct one (\u0027$regex: \"^/dir\"\u0027), I get no error:\n\ntest_sync_branch: âœ”\n\n```\n\nSo while the test fails and completes as expected, the output is pretty ugly. Moreover, even when there is an error, the script does not end:\n\n```\n# invalid regexp\n\n\"$(mongosh --nodb --eval \"$script\")\"\n\necho \"? \u003d $?\"\necho \"output\u003d $output\"\necho \"a\"\n\n# The output is:\n\n./test_mongo_mongo_sync.bash: line 99: : command not found\n? \u003d 127\noutput\u003d \na\ntest_sync_branch: âœ”\n\n# Which is a problem\n\n```\n\nSo using the script as is does not produce a \"good looking\" output, and the script\u0027s failure does not evaluate to false unfortunately.\nIf I just remove the quotes, the \"command not found\" output is removed, and I get the errors as expected.\nSo I can add a \"|| error\" alongside it to get a proper output.\n\nHowever, I then have another question: what\u0027s the point of using a subshell there, since we\u0027re already inside a subshell (with the \u0027(\"$test\")\u0027), inside another subshell (in the for loop) ?",
      "parentUuid": "c3f16b35_181ab6d7",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1732f002_0947fb23",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2022-01-25T09:57:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "50756b7b_7c4dd1f2",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4529f772_b074dfe5",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(minor) quotes",
      "range": {
        "startLine": 61,
        "startChar": 27,
        "endLine": 61,
        "endChar": 35
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "977f1668_0c9d7729",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4529f772_b074dfe5",
      "range": {
        "startLine": 61,
        "startChar": 27,
        "endLine": 61,
        "endChar": 35
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "586f207b_0d5d7dbc",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(style) missing space",
      "range": {
        "startLine": 63,
        "startChar": 46,
        "endLine": 63,
        "endChar": 47
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "749624f8_049c8743",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "586f207b_0d5d7dbc",
      "range": {
        "startLine": 63,
        "startChar": 46,
        "endLine": 63,
        "endChar": 47
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e88411b8_7b884ac8",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(style) missing space",
      "range": {
        "startLine": 64,
        "startChar": 63,
        "endLine": 64,
        "endChar": 64
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f830f6f_ac1fb091",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e88411b8_7b884ac8",
      "range": {
        "startLine": 64,
        "startChar": 63,
        "endLine": 64,
        "endChar": 64
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5519182_f71010be",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(major) No, this is testing that rbh-sync does its job, and it has nothing to do with comparing two databases.",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6c53103_effb7213",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "Done, changed the name of the function.",
      "parentUuid": "e5519182_f71010be",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7d86e52_5915c554",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(minor) This depends on the order of the keys, which we don\u0027t guarantee:\n\n test\u003e db.test.insertOne({\"a\": 0, \"b\": 1, \"c\": 2})\n {\n   acknowledged: true,\n   insertedIds: ObjectId(\"1\")\n }\n test\u003e db.test.insertOne({\"a\": 0, \"c\": 2, \"b\": 1})\n {\n   acknowledged: true,\n   insertedId: ObjectId(\"2\")\n }\n test\u003e db.test.find()\n [\n   { _id: ObjectId(\"1\"), a: 0, b: 1, c: 2 },\n   { _id: ObjectId(\"2\"), a: 0, c: 2, b: 1 }\n ]",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 73
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12465e5e_7a2fe18a",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-15T15:25:39Z",
      "side": 1,
      "message": "Yes, but I don\u0027t see any reason the order should differ between inputs in this test. The keys/values are entered during a sync, and I don\u0027t see why the order of registration would randomly change in the middle of a sync.\n\nCould you explain to me why the order is not guaranteed ?",
      "parentUuid": "c7d86e52_5915c554",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 73
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c89efb1_e1d74ed8",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T18:49:53Z",
      "side": 1,
      "message": "\u003e Could you explain to me why the order is not guaranteed ?\n\nBecause librobinhood\u0027s API does not enforce the order in which fields are pushed to backends.\n\nFor example, with the mongo backend, we push bulk operations to MongoDB, unordered bulk operations.\n\n\u003e With an unordered operations list, MongoDB can execute in parallel, as well as in a nondeterministic order, the write operations in the list.\n\nref: https://docs.mongodb.com/manual/reference/method/Bulk/#unordered-operations",
      "parentUuid": "12465e5e_7a2fe18a",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 73
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48840b56_d2ef42e0",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2021-12-16T09:36:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2c89efb1_e1d74ed8",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 73
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}