{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "60b63381_a02e0347",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(minor) printf \"$@\" \u003e\u00262",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f3f42e8_e7d1607f",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(major) The API is really throwing me off here.\n\nWe don\u0027t indicate which databases are compared, it\u0027s hard-coded. And we don\u0027t even \"compare\" two databases, we check that all the elements of one are included in the other.\n\nHere is an example of an API which I find nicer:\n\n printf -v expected \u0027new Mongo().getDB(\"%s\").entries.find(\n     {\n         \"ns.xattr.path\": {\n             $regex: \"^/dir\"\n         }\n     },\n ).sort(_id: 1)\u0027 \"$testdb1\"\n printf -v actual \u0027new Mongo().getDB(\"%s\").entries.find().sort(_id: 1)\u0027 \"$testdb2\"\n\n cursordiff \"$actual\" \"$expected\"\n \nThen cursordiff can be something like:\n\n cursordiff()\n {\n     local script\n     \n     printf -v script \u0027\n         function every(iterable, func) {\n             for (item of iterable) {\n                 if (!func(item))\n                     return false;\n             }\n             return true;\n         }\n         \n         function* keys(obj) {\n             for (key in obj)\n                 yield key;\n         }\n         \n         function isEqual(obj1, obj2) {\n             if (typeof(obj1) !\u003d\u003d typeof(obj2)) {\n                 return false;\n             }\n             if (typeof(obj1) \u003d\u003d\u003d \"object\") {\n                 return every(keys(obj1), key \u003d\u003e isEqual(obj1[key], obj2[key]));\n             }\n             return obj1 \u003d\u003d\u003d obj2;\n         }\n         \n         function* zip(cur1, cur2) {\n             while (cur1.hasNext() \u0026\u0026 cur2.hasNext())\n                 yield [cur1.next(), cur2.next()];\n         }\n         \n         const cur1 \u003d %s;\n         const cur2 \u003d %s;\n\n         every(zip(cur1, cur2), ([obj1, obj2]) \u003d\u003e isEqual(obj1, obj2));\n     \u0027 \"$1\" \"$2\"\n     \n     \"$(mongosh --eval --nodb \"$script\")\"\n }\n \nThis snippet raises the following exception with mongosh:\n\n ReferenceError: _de10 is not defined\n\nBut runs fine with mongo. Looks like a bug in the shell\u0027s implementation.\n\nThe functions `every()` and `keys()` could be replaced by their builtin JS implementation but only `mongosh` provides them.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4529f772_b074dfe5",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(minor) quotes",
      "range": {
        "startLine": 61,
        "startChar": 27,
        "endLine": 61,
        "endChar": 35
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "586f207b_0d5d7dbc",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(style) missing space",
      "range": {
        "startLine": 63,
        "startChar": 46,
        "endLine": 63,
        "endChar": 47
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e88411b8_7b884ac8",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(style) missing space",
      "range": {
        "startLine": 64,
        "startChar": 63,
        "endLine": 64,
        "endChar": 64
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5519182_f71010be",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 66,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(major) No, this is testing that rbh-sync does its job, and it has nothing to do with comparing two databases.",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7d86e52_5915c554",
        "filename": "tests/test_mongo_mongo_sync.bash",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-12-15T13:22:43Z",
      "side": 1,
      "message": "(minor) This depends on the order of the keys, which we don\u0027t guarantee:\n\n test\u003e db.test.insertOne({\"a\": 0, \"b\": 1, \"c\": 2})\n {\n   acknowledged: true,\n   insertedIds: ObjectId(\"1\")\n }\n test\u003e db.test.insertOne({\"a\": 0, \"c\": 2, \"b\": 1})\n {\n   acknowledged: true,\n   insertedId: ObjectId(\"2\")\n }\n test\u003e db.test.find()\n [\n   { _id: ObjectId(\"1\"), a: 0, b: 1, c: 2 },\n   { _id: ObjectId(\"2\"), a: 0, c: 2, b: 1 }\n ]",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 73
      },
      "revId": "5d6fd95f883afef147fcbf1d9aec0db39521edca",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}